generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credenciais {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  userId    Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id           Int            @id @default(autoincrement())
  role         String
  active       Boolean        @default(false)
  credenciais  Credenciais[]
  adm          Adm[]
  sessionHash  SessionHash[]
  professional Professional[]
  Service      Service[]
}

model Professional {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  avatar    String?
  document  String
  type_doc  String
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Client {
  id     Int     @id @default(autoincrement())
  name   String
  email  String  @unique
  telefone String?

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model Adm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  avatar    String?
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

model SessionHash {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  codigo    Int
  status    Boolean  @default(true)
  action    String
  validate  DateTime
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Service {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  description    String?
  price          Float
  duration       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  profissionalId Int
  profissional   User          @relation(fields: [profissionalId], references: [id])
  appointment    Appointment[]
  payment        Payment[]
}

model Appointment {
  id             Int      @id @default(autoincrement())
  date           DateTime // Data e hor√°rio do agendamento
  status         String   @default("pending") // pending, confirmed, completed, canceled
  professionalId Int
  serviceId      Int
  fanId          Int
  paymentId      Int?
  create_at      DateTime @default(now())
  update_at      DateTime @updatedAt
  service        Service  @relation(fields: [serviceId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float // Valor do pagamento
  status    String   @default("pending") // pending, completed, failed
  method    String // Ex: credit_card, pix, cash
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?
}
