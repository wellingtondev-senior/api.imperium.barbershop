generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  name         String
  role         String
  active       Boolean        @default(false)
  create_at    DateTime       @default(now())
  update_at    DateTime       @updatedAt
  client       Client[]
  professional Professional[]
  credenciais  Credenciais[]
  adm          Adm[]
  sessionHash  SessionHash[]

  @@index([email])
  @@index([role])
}

model Credenciais {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  userId    Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Professional {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  phone           String
  password        String
  avatarUrl       String?
  cpf             String?       @unique
  experienceYears Int?
  specialties     String[]
  rating          Float?        @default(0)
  location        String?
  bio             String?
  isAvailable     Boolean       @default(true)
  workingHours    WorkingHours?
  socialMedia     SocialMedia?
  create_at       DateTime      @default(now())
  update_at       DateTime      @updatedAt
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  services        Service[]
  schedules       Schedule[]

  @@index([isAvailable])
  @@index([userId])
}

model Client {
  id        Int        @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  create_at DateTime   @default(now())
  update_at DateTime   @updatedAt
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  schedules Schedule[]
}

model Adm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  cpf       String?
  avatar    String?
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  userId    Int
  user      User    @relation(fields: [userId], references: [id])

}

model SessionHash {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  status    Boolean  @default(true)
  action    String
  validate  DateTime
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Service {
  id             Int        @id @default(autoincrement())
  name           String
  description    String?
  duration       Int
  price          Float
  create_at      DateTime   @default(now())
  update_at      DateTime   @updatedAt
  active         Boolean    @default(true)
  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])
  schedules      Schedule[]
  payments       Payment[]

  @@index([active])
  @@index([professionalId])
}

model Schedule {
  id             Int          @id @default(autoincrement())
  date           DateTime     // Data e horário do agendamento
  status         String       @default("pending") // pending, confirmed, completed, canceled
  notes          String?      // Notas ou observações sobre o agendamento
  professionalId Int
  clientId       Int
  serviceId      Int
  paymentId      Int?         @unique // Relação única com o pagamento
  professional   Professional @relation(fields: [professionalId], references: [id])
  client         Client      @relation(fields: [clientId], references: [id])
  service        Service     @relation(fields: [serviceId], references: [id])
  payment        Payment?    @relation(fields: [paymentId], references: [id])
  create_at      DateTime    @default(now())
  update_at      DateTime    @updatedAt

  @@index([date])
  @@index([status])
}

model Payment {
  id              Int       @id @default(autoincrement())
  create_at       DateTime  @default(now())
  update_at       DateTime  @updatedAt
  amount          Float
  status          String    @default("pending")
  serviceId       Int
  service         Service   @relation(fields: [serviceId], references: [id])
  value           Float
  method          String
  stripePaymentId String?
  error           String? 
  schedule        Schedule?

  @@index([status])
}

model WorkingHours {
  id             Int          @id @default(autoincrement())
  mondayStart    String?
  mondayEnd      String?
  tuesdayStart   String?
  tuesdayEnd     String?
  wednesdayStart String?
  wednesdayEnd   String?
  thursdayStart  String?
  thursdayEnd    String?
  fridayStart    String?
  fridayEnd      String?
  saturdayStart  String?
  saturdayEnd    String?
  sundayStart    String?
  sundayEnd      String?
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int         @unique
  create_at      DateTime    @default(now())
  update_at      DateTime    @updatedAt
}

model SocialMedia {
  id             Int          @id @default(autoincrement())
  instagram      String?
  facebook       String?
  linkedin       String?
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int         @unique
  create_at      DateTime    @default(now())
  update_at      DateTime    @updatedAt
}
