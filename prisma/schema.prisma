generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  name         String
  role         String
  active       Boolean        @default(false)
  create_at    DateTime       @default(now())
  update_at    DateTime       @updatedAt
  professional Professional[]
  credenciais  Credenciais[]
  adm          Adm[]

  @@index([email])
  @@index([role])
}

model Credenciais {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  userId    Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Professional {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  phone           String
  password        String
  document        String // Documento de identificação (CPF, CNPJ, etc)
  type_doc        String // Tipo do documento
  avatarUrl       String?
  imageUrl        String? // URL adicional para imagem do profissional
  experienceYears Int?
  specialties     String[]
  rating          Float?          @default(0)
  location        String?
  bio             String?
  isAvailable     Boolean         @default(true)
  status          String          @default("active") // active ou inactive
  availability    String? // Disponibilidade específica
  workingHours    WorkingHours?
  socialMedia     SocialMedia?
  create_at       DateTime        @default(now())
  update_at       DateTime        @updatedAt
  userId          Int
  user            User            @relation(fields: [userId], references: [id])
  services        Service[]
  schedules       Schedule[]
  Notifications   Notifications[]

  @@index([isAvailable])
  @@index([status])
  @@index([userId])
}

model Client {
  id            Int             @id @default(autoincrement())
  cardName      String
  email         String          @unique
  phoneCountry  String
  create_at     DateTime        @default(now())
  update_at     DateTime        @updatedAt
  schedules     Schedule[]
  Payment       Payment[]
  Notifications Notifications[]
}

model Adm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  cpf       String?
  avatar    String?
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model SessionHash {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  email     String
  validate  DateTime
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model Service {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  duration       Int
  price          Float
  imageUrl       String?
  create_at      DateTime     @default(now())
  update_at      DateTime     @updatedAt
  active         Boolean      @default(true)
  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])
  schedules      Schedule[]

  @@index([active])
  @@index([professionalId])
}

model Schedule {
  id             Int          @id @default(autoincrement())
  dateTime       DateTime // Data e horário do agendamento
  time           String
  status         String       @default("pending") // pending, confirmed, completed, canceled
  professionalId Int
  clientId       Int
  services       Service[] // Relação muitos-para-muitos com serviços
  paymentId      String // Relação única com o pagamento
  professional   Professional @relation(fields: [professionalId], references: [id])
  client         Client       @relation(fields: [clientId], references: [id])
  create_at      DateTime     @default(now())
  update_at      DateTime     @updatedAt
  Payment        Payment      @relation(fields: [paymentId], references: [id])

  @@index([dateTime])
  @@index([status])
}

model Payment {
  id               String     @id
  object           String
  type             String
  api_version      String
  created          Int
  data             Json // Store the entire webhook data object
  livemode         Boolean
  pending_webhooks Int
  request          Json // Store the request object
  // Campos extraídos do data.object para facilitar consultas
  amount           Int? // Valor em centavos
  currency         String?
  status           String
  payment_method   String?
  client_secret    String?
  // Relações existentes
  client           Client     @relation(fields: [clientId], references: [id])
  clientId         Int
  create_at        DateTime   @default(now())
  update_at        DateTime   @updatedAt
  schedule         Schedule[]

  @@index([status])
  @@index([clientId])
}

model WorkingHours {
  id             Int          @id @default(autoincrement())
  mondayStart    String?
  mondayEnd      String?
  tuesdayStart   String?
  tuesdayEnd     String?
  wednesdayStart String?
  wednesdayEnd   String?
  thursdayStart  String?
  thursdayEnd    String?
  fridayStart    String?
  fridayEnd      String?
  saturdayStart  String?
  saturdayEnd    String?
  sundayStart    String?
  sundayEnd      String?
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int          @unique
  create_at      DateTime     @default(now())
  update_at      DateTime     @updatedAt
}

model SocialMedia {
  id             Int          @id @default(autoincrement())
  instagram      String?
  facebook       String?
  twitter        String? // Adicionado campo twitter
  linkedin       String?
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int          @unique
  create_at      DateTime     @default(now())
  update_at      DateTime     @updatedAt
}

model Notifications {
  id             Int          @id @default(autoincrement())
  title          String
  description    String
  status         String       @default("pending") // pending, confirmed, completed, canceled
  professionalId Int
  clientId       Int
  professional   Professional @relation(fields: [professionalId], references: [id])
  client         Client       @relation(fields: [clientId], references: [id])
  create_at      DateTime     @default(now())
  update_at      DateTime     @updatedAt
}

model PushSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  endpoint  String
  p256dh    String
  auth      String
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  @@index([userId])
}
