generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credenciais {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  userId    Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id           Int            @id @default(autoincrement())
  role         String
  active       Boolean        @default(false)
  credenciais  Credenciais[]
  adm          Adm[]
  sessionHash  SessionHash[]
  professional Professional[]
  Service      Service[]
}

model Professional {
  id              Int           @id @default(autoincrement())
  userId          Int
  name            String
  email           String        @unique
  phone           String
  password        String
  avatarUrl       String?
  cpf             String?       @unique
  experienceYears Int?
  specialties     String[]
  rating          Float?        @default(0)
  location        String?
  bio             String?
  isAvailable     Boolean       @default(true)
  workingHours    WorkingHours?
  socialMedia     SocialMedia?
  create_at       DateTime      @default(now())
  update_at       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
}

model Client {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  telefone String?

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model Adm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  avatar    String?
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

model SessionHash {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  codigo    Int
  status    Boolean  @default(true)
  action    String
  validate  DateTime
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Service {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  description    String?
  price          Float
  duration       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  profissionalId Int
  profissional   User          @relation(fields: [profissionalId], references: [id])
  appointment    Appointment[]
  payment        Payment[]
}

model Appointment {
  id             Int      @id @default(autoincrement())
  date           DateTime // Data e horário do agendamento
  status         String   @default("pending") // pending, confirmed, completed, canceled
  professionalId Int
  serviceId      Int
  fanId          Int
  paymentId      Int?
  create_at      DateTime @default(now())
  update_at      DateTime @updatedAt
  service        Service  @relation(fields: [serviceId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float // Valor do pagamento
  status    String   @default("pending") // pending, completed, failed
  method    String // Ex: credit_card, pix, cash
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?
}

model WorkingHours {
  id             Int          @id @default(autoincrement())
  mondayStart    String?      // Horário de início segunda-feira
  mondayEnd      String?      // Horário de término segunda-feira
  tuesdayStart   String?      // Horário de início terça-feira
  tuesdayEnd     String?      // Horário de término terça-feira
  wednesdayStart String?      // Horário de início quarta-feira
  wednesdayEnd   String?      // Horário de término quarta-feira
  thursdayStart  String?      // Horário de início quinta-feira
  thursdayEnd    String?      // Horário de término quinta-feira
  fridayStart    String?      // Horário de início sexta-feira
  fridayEnd      String?      // Horário de término sexta-feira
  saturdayStart  String?      // Horário de início sábado
  saturdayEnd    String?      // Horário de término sábado
  sundayStart    String?      // Horário de início domingo
  sundayEnd      String?      // Horário de término domingo
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int          @unique // Um profissional só pode ter um horário de trabalho
  create_at      DateTime     @default(now())
  update_at      DateTime     @updatedAt
}

model SocialMedia {
  id             Int          @id @default(autoincrement())
  instagram      String? // Link para o perfil no Instagram
  facebook       String? // Link para o perfil no Facebook
  linkedin       String? // Link para o perfil no LinkedIn
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int          @unique // Um profissional só pode ter uma rede social
  create_at      DateTime     @default(now())
  update_at      DateTime     @updatedAt
}
