generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credenciais {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  userId    Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id           Int            @id @default(autoincrement())
  role         String
  active       Boolean        @default(false)
  fans         Fans[]
  credenciais  Credenciais[]
  adm          Adm[]
  sessionHash  SessionHash[]
  professional Professional[]
  Service      Service[]
}

model Professional {
  id     Int     @id @default(autoincrement())
  name   String
  email  String  @unique
  avatar String?
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Fans {
  id     Int     @id @default(autoincrement())
  name   String
  email  String  @unique
  avatar String?

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Adm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  avatar    String?
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

model SessionHash {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  codigo    Int
  status    Boolean  @default(true)
  action    String
  validate  DateTime
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Float
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}
